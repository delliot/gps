'''
/*------------------------------------------------------------------------------------------------------------------
-- SOURCE FILE:		GPS_Print.py - prints the GPS data
-- PROGRAM:			GPSDPython
--
-- FUNCTIONS:
--					__init__(self)
--					convertTODMS(float)
--					GPS_Print(self, GPS_Object)
--
-- DATE:			November 7, 2017
--
-- REVISIONS:		N/A
--
-- DESIGNER:		Delan Elliot, Roger Zhang
--
-- PROGRAMMER:		Delan Elliot, Roger Zhang
--
-- NOTES:
-- The GPS print class takes in the GPS object and prints out the gps information to the console.
----------------------------------------------------------------------------------------------------------------------*/
'''
import os
from gps3 import gps3
from time import *
import time
import threading
import tkinter
import config
from numpy import *
import math

class GPS_Print(object):
	'''
	/*--------------------------------------------------------------------------------------------------------------------
	-- FUNCTION:		__init__
	--
	-- DATE:			November 7, 2017
	--
	-- REVISIONS:		N/A
	--
	-- DESIGNER:		Delan Elliot and Roger Zhang
	--
	-- PROGRAMMER:		Roger Zhang
	--
	-- INTERFACE:		__init__(self)
	--
	-- RETURNS:			void
	--
	-- NOTES:
	-- This is the constructor for GPS_Print.
	----------------------------------------------------------------------------------------------------------------------*/
	'''
	"""docstring for GPS_Print"""
	def __init__(self):
		print("starting")


	'''
	/*--------------------------------------------------------------------------------------------------------------------
	-- FUNCTION:		convertTODMS
	--
	-- DATE:			November 7, 2017
	--
	-- REVISIONS:		N/A
	--
	-- DESIGNER:		Delan Elliot and Roger Zhang
	--
	-- PROGRAMMER:		Roger Zhang
	--
	-- INTERFACE:		convertTODMS(float)
	--
	-- RETURNS:			String
	--
	-- NOTES:
	-- This is the conversion function that converts the latitude/longitude to Degrees,
	-- Minutes, Seconds and directions.
	----------------------------------------------------------------------------------------------------------------------*/
	'''
	def convertToDMS(self, lat, latlong):
		if not lat == 'n/a':
			directionLat = ''
			if latlong == 0:
				directionLat = ' N' if lat > 0 else ' S'
			else:
				directionLat = ' E' if lat > 0 else ' W'
			dd = int(lat)
			mm = int((lat-int(lat))*60)
			ss = (((lat-int(lat))*60) - mm) * 60
			return str('Degrees: ' + str(abs(dd)) + ' minutes: ' + str(abs(mm)) + ' seconds: ' + str(abs(ss)) + directionLat)
		else:
			return str('not available')

	'''
	/*--------------------------------------------------------------------------------------------------------------------
	-- FUNCTION:		updateGui
	--
	-- DATE:			November 7, 2017
	--
	-- REVISIONS:		N/A
	--
	-- DESIGNER:		Delan Elliot 
	--
	-- PROGRAMMER:		Delan Elliot
	--
	-- INTERFACE:		updateGui(self, data)
	-- 					
	--						data: python dictionary generated by gps3 socket
	--
	-- RETURNS:			void
	--
	-- NOTES:
	-- This method updates the gui and is called each time the gps read thread gets new data. 
	-- It updates the canvas and text elements. The canvas element is called by plotOnCanvas 
	-- method which is called here. 
	-- It also prints all information to the console, if you wish to redirect output to a file. 
	----------------------------------------------------------------------------------------------------------------------*/
	'''
	def updateGui(self, data):
		print('----------GPS Data----------')
		print('Time: ', data.TPV['time'])
		print('Latitude: ', self.convertToDMS(data.TPV['lat'], 0))
		print('Longitude: ', self.convertToDMS(data.TPV['lon'], 1))
		print('Elevation (m): ', data.TPV['alt'])
		print('Speed (m/s): ', data.TPV['speed'])
		print('Climb: ', data.TPV['climb'])
		print('Satellites:')
		if isinstance(data.SKY['satellites'], list):
			for i in data.SKY['satellites']:
				print('\t', i)
		else:
			print(' N/A ')
		if data.TPV['lat'] != "n/a" and data.TPV['lon'] != "n/a":
			self.plotOnCanvas(config.canvas, data.TPV['lon'], data.TPV['lat'])

		config.textBox.configure(state="normal")
		config.textBox.delete('1.0', tkinter.END)
		config.textBox.insert(tkinter.END, '----------GPS data----------\n')
		config.textBox.insert(tkinter.END, 'Time (UTC):    ' + data.TPV['time'] + '\n')
		config.textBox.insert(tkinter.END, 'Latitude: ' + self.convertToDMS(data.TPV['lat'], 0) + '\n')
		config.textBox.insert(tkinter.END, 'Longitude: ' + self.convertToDMS(data.TPV['lon'], 1) + '\n')
		config.textBox.insert(tkinter.END, 'Elevation (m): ' + str(data.TPV['alt']) + '\n')

		if isinstance(data.SKY['satellites'], list):
			config.textBox.insert(tkinter.END, 'Satellites: \n')
			for s in data.SKY['satellites']:
				config.textBox.insert(tkinter.END, str(s) + '\n')

		else:
			config.textBox.insert(tkinter.END, 'No Satellites \n')
		config.textBox.configure(state="disabled")

	'''
		/*--------------------------------------------------------------------------------------------------------------------
		-- FUNCTION:		toWebMercator
		--
		-- DATE:			November 7, 2017
		--
		-- REVISIONS:		N/A
		--
		-- DESIGNER:		Delan Elliot 
		--
		-- PROGRAMMER:		Delan Elliot
		--
		-- INTERFACE:		toWebMercator(self, xLon, yLat)
		-- 					
		--						xLon: longitude in decimal degrees
		--						yLat: latitude in decimal degrees
		--
		-- RETURNS:			void
		--
		-- NOTES:
		-- In order to properly project gps coordinates on a map, we transform them in the webmercator projection. This is 
		-- necessary because almost all publicly available mapping tools are built for webmercator. 
		-- This equation relies on: the height of your projection, and the relative zoom of the projection. In this 
		-- implementation the zoom is hardcoded at 1.
		-- x = (height / 2 / pi) * 2 ^ zoom * (lon in radians + pi)
		-- y = (height / 2 / pi) * 2 ^ zoom * (pi - ln( tan((pi/4) + (Lat in radians / 2)))
		----------------------------------------------------------------------------------------------------------------------*/
		'''
	def toWebMercator(self, xLon, yLat):
		m_lon = deg2rad(xLon)
		m_lat= deg2rad(yLat)


		x = int((config.height / 2 / pi) * 2 * (m_lon + pi))
		y = int(((config.height / 2 / pi) * 2) * (pi - log((tan(pi / 4 + m_lat / 2)))))

		return x, y

	'''
			/*--------------------------------------------------------------------------------------------------------------------
			-- FUNCTION:		plotOnCanvas
			--
			-- DATE:			November 7, 2017
			--
			-- REVISIONS:		N/A
			--
			-- DESIGNER:		Delan Elliot 
			--
			-- PROGRAMMER:		Delan Elliot
			--
			-- INTERFACE:		plotOnCanvas(self, canvas, x, y)
			-- 					
			--						canvas: the canvas on which to display the location
			--						x: the mercator projected coordinate for longitude
			--						y: the mercator projected coordinate for latitude
			--
			-- RETURNS:			void
			--
			-- NOTES:
			-- In this function, the mercator projection is used along with the height and mercator projection of the centre in
			-- order to plot the location on the map. 
			--
			-- -----------------------------------
			-- |	z							 |
			-- |	  P   y						 |
			-- |				x				 |
			-- |								 |
			-- |								 |
			-- -----------------------------------
			--
			-- In a rough sketch, if you are trying to plot point P, it would return mercator projection at point z.
			-- you would add the value of x, and subtract the value of y, where y is the mercator projection of coord 0,0.
			--
			-- An oval is projected over your approximate location with these coordinates.
			----------------------------------------------------------------------------------------------------------------------*/
	'''
	def plotOnCanvas(self, canvas, x, y):

		pixels = self.toWebMercator(x, y)
		center = self.toWebMercator(0,0)
		pos = int(pixels[0] - center[0] + (config.width /2)), int(pixels[1] - center[1] + (config.height/2))
		canvas.create_oval(pos[0] - 20, pos[1] - 20, pos[0], pos[1], fill="#B22222")
